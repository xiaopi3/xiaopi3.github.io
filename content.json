[{"title":"Hexo-Nexmon主题安装和配置流程","date":"2020-03-12T10:48:59.000Z","path":"archives/85d6a244.html","text":"1. nexmon参考网址： https://docs.nexmoe.com/ 安装cd themes # 载入主题目录 git clone https://github.com/nexmoe/hexo-theme-nexmoe.git nexmoe # 安装 cd nexmoe # 进入 Nexmoe 主题目录 npm i --save hexo-wordcount # Node 版本 7.6.0 之前,请安装 2.x 版本 (Node.js v7.6.0 and previous) # npm install hexo-wordcount@2 --save cp -i _config.example.yml _config.yml 此处只记录踩坑点!!! 主题默认开启了字数统计，所以必须要安装插件： npm i –save hexo-wordcount 尽量使用最新版的nodejs 进入主题文件夹： cp _config.example.yml _config.yml 启用进入hexo的config配置文件，将theme值改为nexmon（和主题文件夹名一致即可） hexo clean &amp;&amp; hexo g &amp;&amp; hexo s 打开浏览器进入： localhost:4000 配置大多数配置参考主题config文件自带注释 友情链接的页面启用友情链接后，需要在博客根目录下的source文件夹内建立py.md文件，并在文件头写入： --- title: links date: 2013/7/13 20:46:25 layout: py permalink: PY.html ---友链格式： - [![标题](https://example.com/logo.png)](https://example.com/ &quot;标题&quot;)关于我页面启用关于我页面后，需要在博客根目录下的source文件夹内建立me.md文件，然后在主题config文件中配置about页面的名字即可，此处为me 2. 坑坑比较多，这里排一下雷： 文章中引用图片格式为![avatar](xxx.jpg)，图片放在资源文件夹下，资源文件夹为md文件同级的同名文件夹，需要在hexo配置中启用assets选项 给文章添加图头，格式为： --- cover: /img/xxx.xxx coverWidth: 1200 coverHeight: 750 --- 图片放置在主题文件夹下的source目录下的img内，图片大小格式与图片一致 主题bug：tagCloud高亮没有显示，解决办法:直接把css加在index文件里面： 在 nexmoe\\layout\\_widget\\tagcloud.ejs里面，和div标签平行加上内容，最终修改结果如： &lt;% if (site.tags.length){ %&gt; &lt;div class=&quot;nexmoe-widget-wrap&quot;&gt; &lt;h3 class=&quot;nexmoe-widget-title&quot;&gt;&lt;%= __(&#39;tagcloud&#39;) %&gt;&lt;/h3&gt; &lt;div id=&quot;randomtagcloud&quot; class=&quot;nexmoe-widget tagcloud&quot;&gt; &lt;%- tagcloud() %&gt; &lt;/div&gt; &lt;% if (theme.maxTagcloud){ %&gt; &lt;script&gt; var maxTagcloud = parseInt(&lt;%= theme.maxTagcloud %&gt;); var tags_length = parseInt(&lt;%= site.tags.length %&gt;); var tags_arr = []; for(var i = 0; i &lt; tags_length; i++){ tags_arr.push(i); } tags_arr.sort(function (l, r) { return Math.random() &gt; 0.5 ? -1 : 1; }); tags_arr = tags_arr.slice(0, maxTagcloud &lt; tags_length ? tags_length - maxTagcloud : 0); for(var tag_i = 0; tag_i &lt; tags_arr.length; tag_i++){ document.getElementById(&quot;randomtagcloud&quot;).children[tags_arr[tag_i]].style.display = &#39;none&#39;; } &lt;/script&gt; &lt;% } %&gt; &lt;/div&gt; &lt;style&gt; #nexmoe-header .nexmoe-widget-wrap .tagcloud a:nth-child(7n+1) { background-color: rgba(255,78,106,0.15); color: rgba(255,78,106,0.8); } #nexmoe-header .nexmoe-widget-wrap .tagcloud a:nth-child(7n+2) { background-color: rgba(255,170,115,0.15); color: #ffaa73; } #nexmoe-header .nexmoe-widget-wrap .tagcloud a:nth-child(7n+3) { background-color: rgba(254,212,102,0.15); color: #fed466; } #nexmoe-header .nexmoe-widget-wrap .tagcloud a:nth-child(7n+4) { background-color: rgba(60,220,130,0.15); color: #3cdc82; } #nexmoe-header .nexmoe-widget-wrap .tagcloud a:nth-child(7n+5) { background-color: rgba(100,220,240,0.15); color: #64dcf0; } #nexmoe-header .nexmoe-widget-wrap .tagcloud a:nth-child(7n+6) { background-color: rgba(100,185,255,0.15); color: #64b9ff; } #nexmoe-header .nexmoe-widget-wrap .tagcloud a:nth-child(7n+7) { background-color: rgba(180,180,255,0.15); color: #b4b4ff; } #nexmoe-content .nexmoe-post .nexmoe-post-meta { margin: 25px 0px; font-size: 0; } #nexmoe-content .nexmoe-post .nexmoe-post-meta a { border-radius: 20px; padding: 10px 18px; color: #fff; font-size: 14px; display: inline-block; margin-bottom: 5px; margin-right: 10px; } #nexmoe-content .nexmoe-post .nexmoe-post-meta a .nexmoefont { font-size: 14px; } #nexmoe-content .nexmoe-post .nexmoe-post-meta a:before, #nexmoe-content .nexmoe-post .nexmoe-post-meta i:before { margin-right: 5px; } #nexmoe-content .nexmoe-post .nexmoe-post-meta a:nth-child(7n+1) { background-color: rgba(255,78,106,0.15); color: #ff4e6a; } #nexmoe-content .nexmoe-post .nexmoe-post-meta a:nth-child(7n+2) { background-color: rgba(255,170,115,0.15); color: #ffaa73; } #nexmoe-content .nexmoe-post .nexmoe-post-meta a:nth-child(7n+3) { background-color: rgba(254,212,102,0.15); color: #fed466; } #nexmoe-content .nexmoe-post .nexmoe-post-meta a:nth-child(7n+4) { background-color: rgba(60,220,130,0.15); color: #3cdc82; } #nexmoe-content .nexmoe-post .nexmoe-post-meta a:nth-child(7n+5) { background-color: rgba(100,220,240,0.15); color: #64dcf0; } #nexmoe-content .nexmoe-post .nexmoe-post-meta a:nth-child(7n+6) { background-color: rgba(100,185,255,0.15); color: #64b9ff; } #nexmoe-content .nexmoe-post .nexmoe-post-meta a:nth-child(7n+7) { background-color: rgba(180,180,255,0.15); color: #b4b4ff; } &lt;/style&gt; &lt;% } %&gt;","tags":[{"name":"Guide","slug":"Guide","permalink":"https://xiaopi3.gitee.io/tags/Guide/"}]},{"title":"Hexo博客框架安装教程","date":"2020-03-12T10:29:18.000Z","path":"archives/afae5a43.html","text":"安装流程 安装nodejs 安装cnpm（可选） npm install cnpm -g –registry=https://registry.npm.taobao.org 安装hexo-cli cnpm install -g hexo-cli 验证安装 hexo -v 初始化并启动 hexo init blog cd blog npm intall hexo server(或者s) 写文章 hexo n “标题” 生成并预览 hexo clean hexo g hexo s 发布到github 安装hexo-deployer-git cnpm install –save hexo-deployer-git 配置_config.yml 此处主要是与github做绑定，将本地修改的直接推送到github上。 注意：需要先在github上创建项目名为：用户名.github.io deploy: type: git repo: https://github.com/用户名/项目名 branch: master 部署到github hexo d 测试 在地址栏中输入项目名，直接进入博客 更换主题自行搜索主题进行替换，此处演示yillia主题替换： 克隆主题 git clone https://www.github.com/litten/hexo-theme-yilia.git themes/yilia 替换 hexo clean &amp;&amp; hexo d 再推荐两个主题： git clone https://github.com/litten/hexo-theme-yilia.git themes/yilia https://github.com/nexmoe/hexo-theme-nexmoe （自用） 主题集合： https://hexo.io/themes/ 还有一个安卓风格主题： cd themes git clone https://github.com/viosey/hexo-theme-material.git material cd material git checkout {branch/tags name}注意：如果有需要，把主题文件夹内的config文件名重命名一下！去掉templete 以上三个主题全部fork到了我的gitee仓库中，提升下载速度。主题安装方式和配置参考各自主题的文档 注意此处有坑： 如果采用Gitee托管的话，进入托管的仓库-&gt;设置Gitee Pages服务，若绑定域名需要升级Gitee Pro，普通版每次更新要进行手动更新！！！具体参考：https://gitee.com/help/articles/4136 github 需要使用域名才能进行访问，我购买了xiaopi3.fun这个域名，需要在该项目的设置中的domain设置那里填入自己的域名，并启用https hexo默认解析md有可能会有奇怪的bug，需要先本地预览看看自己调一下 折叠文章使用：&lt;!--more--&gt;","tags":[{"name":"Guide","slug":"Guide","permalink":"https://xiaopi3.gitee.io/tags/Guide/"}]},{"title":"SpringBoott环境搭建","date":"2020-03-10T12:14:53.000Z","path":"archives/e5dfb256.html","text":"废话不多说，直接上 新建maven工程，选择空架构 在pom文件中做如下两步操作 a. 引入父工程起步依赖（所有springboot工程，都必须继承） &lt;parent&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt; &lt;version&gt;2.0.1.RELEASE&lt;/version&gt; &lt;/parent&gt; // 引入基础web起步依赖 &lt;dependencies&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt; &lt;/dependency&gt; &lt;/dependencies&gt; b. 新建引导类（一般习惯写在main方法中，也可以单独写） /*** *spring需要一个标志来识别某个类为引导类，需要加上该注解！ */ @SpringBootApplication public class MySpringBootApplication { public static void main(String[]args) { /*** *这是一个引导类 *run方法是引导类入口，程序启动进入main方法，然后加载引导类 */ SpringApplication.run(MySpringBootApplication.class); } } 启动项目 此时无法看到页面但是项目已经正常运行起来了，为了更直观，我在这里写一个地址映射 Controller类编写 新建controller层，新建控制类，如QuickController编写一个任意方法 /*** *为了让Spring能识别，需要在这里标志为控制器 */ @Controller public class QuickController{ /*** *此方法为调用后返回字符串 *请求地址使用注解标志 *返回值类型使用注解标志 * ResponseBody标识按照Json串解析返回值 *@return字符串 */ @RequestMapping(&quot;/quick&quot;) @ResponseBody public String quick(){ return&quot;hello springboot!&quot;; } } 访问localhost:8080/quick即可看到返回值为hello Springboot!","tags":[{"name":"前端技术","slug":"前端技术","permalink":"https://xiaopi3.gitee.io/tags/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/"}]},{"title":"Hello World","date":"2020-03-09T12:53:37.086Z","path":"archives/4a17b156.html","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post$ hexo new &quot;My New Post&quot; More info: Writing Run server$ hexo server More info: Server Generate static files$ hexo generate More info: Generating Deploy to remote sites$ hexo deploy More info: Deployment","tags":[{"name":"测试","slug":"测试","permalink":"https://xiaopi3.gitee.io/tags/%E6%B5%8B%E8%AF%95/"}]}]